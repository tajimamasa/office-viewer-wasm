// Generated by `wit-bindgen` 0.39.0. DO NOT EDIT!
// Options used:
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_parse_file_cabi<T: Guest>(arg0: *mut u8,arg1: usize,) -> *mut u8 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let len0 = arg1;
let result1 = T::parse_file(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0));
let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
let vec3 = (result1.into_bytes()).into_boxed_slice();
let ptr3 = vec3.as_ptr().cast::<u8>();
let len3 = vec3.len();
::core::mem::forget(vec3);
*ptr2.add(4).cast::<usize>() = len3;
*ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
ptr2
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_parse_file<T: Guest>(arg0: *mut u8,) {
  let l0 = *arg0.add(0).cast::<*mut u8>();
  let l1 = *arg0.add(4).cast::<usize>();
  _rt::cabi_dealloc(l0, l1, 1);
}
pub trait Guest {
  fn parse_file(raw_data: _rt::Vec::<u8>,) -> _rt::String;
}
#[doc(hidden)]

macro_rules! __export_world_parser_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[unsafe(export_name = "parse-file")]
    unsafe extern "C" fn export_parse_file(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_parse_file_cabi::<$ty>(arg0, arg1)
    }
    #[unsafe(export_name = "cabi_post_parse-file")]
    unsafe extern "C" fn _post_return_parse_file(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_parse_file::<$ty>(arg0)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_parser_cabi;
#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit::<u8>; 8]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
mod _rt {
  #![allow(dead_code, clippy::all)]

  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  pub use alloc_crate::vec::Vec;
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    let layout = alloc::Layout::from_size_align_unchecked(size, align);
    alloc::dealloc(ptr, layout);
  }
  pub use alloc_crate::string::String;
  extern crate alloc as alloc_crate;
  pub use alloc_crate::alloc;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_parser_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_parser_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_parser_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.39.0:office:office-viewer-lib:parser:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 199] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07K\x01A\x02\x01A\x03\x01\
p}\x01@\x01\x08raw-data\0\0s\x04\0\x0aparse-file\x01\x01\x04\0\x1foffice:office-\
viewer-lib/parser\x04\0\x0b\x0c\x01\0\x06parser\x03\0\0\0G\x09producers\x01\x0cp\
rocessed-by\x02\x0dwit-component\x070.225.0\x10wit-bindgen-rust\x060.39.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

